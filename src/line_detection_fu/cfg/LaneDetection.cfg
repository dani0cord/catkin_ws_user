#!/usr/bin/env python
PACKAGE = "line_detection_fu"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("minYRoiLeft",                 int_t,    0, "a", 10, -640, 640)
gen.add("maxYRoiLeft",                 int_t,    0, "b", 10, -640, 640)
gen.add("minYRoiCenter",               int_t,    0, "c", 60, -640, 640)
gen.add("maxYRoiCenter",               int_t,    0, "d", 60, -640, 640)
gen.add("minYRoiRight",                int_t,    0, "e", 120, -640, 640)
gen.add("maxYRoiRight",                int_t,    0, "f", 130, -640, 640)
gen.add("interestDistancePoly",        int_t,    0, "Accepted horizontal distance between a potential point and a detected polynomial", 10,  0, 100)
gen.add("interestDistanceDefault",     int_t,    0, "Accepted horizontal distance between a potential point and a default line", 5,  0, 100)
gen.add("iterationsRansac",            int_t,    0, "Iterations during ransac", 38,  0, 100)
gen.add("maxYRoi",                     int_t,    0, "Maximum y value for points on a line", 360,  0, 480)
gen.add("minYDefaultRoi",              int_t,    0, "Minimum y value for points to check distance to default lane positions (defaultXLeft etc) ", 10,  0, 160)
gen.add("minYPolyRoi",                 int_t,    0, "Minimum y value for points on lane marking if a polynomial was detected in a previous frame", 11,  0, 160)
gen.add("polyY1",                      int_t,    0, "Y of first point of generated polynomial during ransac iteration. Horizontal distance of this point is compared to default lane and to previous found polynomial.", 20,  0, 160)
gen.add("polyY2",                      int_t,    0, "Y of second point. See polyY1", 50,  0, 160)
gen.add("polyY3",                      int_t,    0, "Y of third point. See polyY1", 70,  0, 160)
gen.add("maxAngleDiff",                int_t,    0, "Optional smoothing when angle diff larger than this", 14,  1, 999)
gen.add("projYStart",                  int_t,    0, "Y position of processed window inside of IPmapped img", 60,  0, 80)
gen.add("roiTopW",                     int_t,    0, "Width of top of roi", 620,  0, 640)
gen.add("roiBottomW",                  int_t,    0, "Width of bottom of roi", 620,  0, 640)
gen.add("proportionThreshould",        double_t, 0, "Minimum proportion of supporter points for possible polynomial to accept polynomial as valid during ransac iteration", 0.68, 0,   1)
gen.add("gradientThreshold",           int_t,    0, "Edge Detection: Minimum value of sum after applying kernel", 10,  0, 100)
gen.add("nonMaxWidth",                 int_t,    0, "Edge Detection: Minimum width between 2 maxima points on a scanline", 16,  0, 100)
gen.add("laneMarkingSquaredThreshold", int_t,    0, "Lane Extraction: Maximum value of squared subtraction of possible start and end point of lane marking", 56,  0, 1000)
gen.add("angleAdjacentLeg",            int_t,    0, "-Y position of where the angle of polynomial is computed", 18,  0, 160)
gen.add("scanlinesVerticalDistance",   int_t,    0, "Distance between 2 vertical scanlines", 2,  0, 160)
gen.add("scanlinesMaxCount",           int_t,    0, "Maximum of scanlines", 200,  0, 300)

exit(gen.generate(PACKAGE, "line_detection_fu", "LaneDetection"))

